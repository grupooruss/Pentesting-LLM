import requests
import json
import time

def test_model_theft(base_url, api_key, num_queries=100):
    # Crear un archivo para almacenar las respuestas del modelo
    with open("model_responses.txt", "w") as f:
        for i in range(num_queries):
            # Generar una pregunta aleatoria o utilizar un conjunto predefinido
            prompt = f"How does {i} relate to the concept of numbers?"
            
            headers = {
                "Authorization": f"Bearer {api_key}",
                "Content-Type": "application/json"
            }
            payload = json.dumps({
                "prompt": prompt,
                "max_tokens": 50
            })

            response = requests.post(
                f"{base_url}/generate", 
                headers=headers, 
                data=payload
            )

            # Revisar la respuesta del modelo
            content = json.loads(response.content)
            generated_text = content.get("choices", [{}])[0].get("text", "").strip()

            # Almacenar la respuesta en un archivo
            f.write(f"Prompt: {prompt}\n")
            f.write(f"Generated Text: {generated_text}\n\n")

            # Esperar un poco antes de la pr√≥xima solicitud para evitar ser bloqueado
            time.sleep(1)

# Ejemplo de uso en un entorno controlado y con consentimiento
# base_url = "https://api.openai.com/v1/engines/davinci-codex"
# api_key = "your_openai_api_key_here"
# test_model_theft(base_url, api_key)
